//go:build gen

package main

import (
	"bytes"
	"go/format"
	"html/template"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"

	"github.com/pkg/errors"
	"golang.org/x/tools/go/packages"
)

//go:generate go run -tags gen github.com/incu6us/goimports-reviser/v2/pkg/std/gen

const (
	fileName = "package_list.go"

	fileTemplate = `// Code generated by ./gen/gen.go DO NOT EDIT.
package std

// StdPackages is a set of go libs
var StdPackages = map[string]struct{}{
{{- range $index, $element := .}}
	"{{$element}}": {},
{{- end}}
}

`
)

var staticPackageList = []string{
	"syscall/js",
}

func main() {
	w := bytes.NewBufferString("")

	tpl := template.New("tpl")
	tpl, err := tpl.Parse(fileTemplate)
	if err != nil {
		log.Fatalf("%+v", errors.WithStack(err))
		return
	}

	packageList, err := packages.Load(nil, "std")
	if err != nil {
		log.Fatalf("%+v", errors.WithStack(err))
		return
	}

	for _, experimentalPackage := range staticPackageList {
		packageList = append(packageList, &packages.Package{
			ID: experimentalPackage,
		})
	}

	if err := tpl.Execute(w, packageList); err != nil {
		log.Fatalf("%+v", errors.WithStack(err))
		return
	}

	data, err := format.Source(w.Bytes())
	if err != nil {
		log.Fatalf("%+v", errors.WithStack(err))
		return
	}

	currentDir, err := os.Getwd()
	if err != nil {
		log.Fatalf("%+v", errors.WithStack(err))
	}

	filePath := filepath.Join(filepath.Join(currentDir, "pkg/std"), fileName)
	log.Printf("file path to be updated: %s", filePath)
	if err := ioutil.WriteFile(filePath, data, 0644); err != nil {
		log.Fatalf("%+v", errors.WithStack(err))
	}
}
